/*
* Configuration for the GigaSpaces Administration Command Line Interface
*/
import com.gigaspaces.admin.cli.GS.OptionHandler;
import com.gigaspaces.admin.cli.GS.OptionHandlerDesc;
import com.gigaspaces.admin.cli.SpaceHandler;
import com.gigaspaces.admin.cli.ShutDownContainer;
import com.gigaspaces.admin.cli.AdminHandler;
import com.gigaspaces.admin.cli.CopySpace;
import org.jini.rio.boot.BootUtil;

com.gigaspaces.admin.cli {
    addOptionHandlers = new OptionHandlerDesc[] {
        /* space operations handler
         * space command */
	    new OptionHandlerDesc(SpaceHandler.OPERATION_NAME,
                              "com.gigaspaces.admin.cli.SpaceHandler" ),
        /* Administrator operation */
	    new OptionHandlerDesc(AdminHandler.OPERATION_NAME,
                              "com.gigaspaces.admin.cli.AdminHandler" )
    };
}

com.gigaspaces.admin {
    groups = BootUtil.toArray("${com.gs.jini_lus.groups}");
    locators = BootUtil.toLookupLocators("${com.gs.jini_lus.locators}");
}

com.gigaspaces.transport {
    host = BootUtil.getHostAddressFromProperty("java.rmi.server.hostname");

    nioConfig = new com.gigaspaces.config.lrmi.nio.NIOConfiguration(
                                                                        16, /* min executors threads */
                                                                        500, /* max executors threads */
                                                                        1024, /* maxConnPool */
                                                                        true, /* isMultiplex */
                                                                        null, /* bindHostName - if null resolves to the localhost IP address */
                                                                        0, /* bindPort - if null any next free port will be used for incoming client requests. The server port is set by default to 0, which means next free port*/
																		java.lang.Integer.MAX_VALUE, /* threadsQueueSize */
																		0, /* slowConsumerThroughput */
																		100, /* slowConsumerLatency */
                                                                        3 /* slowConsumerRetries */);
    
	// uncomment the following next line to use Jrmp exporter instead of GenericExporter
    // defaultExporter = new net.jini.jrmp.JrmpExporter();
    defaultExporter = new com.gigaspaces.lrmi.GenericExporter( nioConfig );
}

/*
 * Lookup Discovery attribute which controls how often Lookup Discovery examines the
 * multicast announcements from previously discovered lookup services for liveness.
 */
net.jini.discovery.LookupDiscovery {
    multicastAnnouncementInterval=5000;
	taskManager = new com.sun.jini.thread.TaskManager(15, 30000, 3.0F, "CLI LookupDiscovery Task", 10);
}

net.jini.discovery.LookupLocatorDiscovery {
	taskManager = new com.sun.jini.thread.TaskManager(15, 30000, 3.0F, "CLI LookupLocatorDiscovery Task", 10);
}

net.jini.lease.LeaseRenewalManager {
	taskManager = new com.sun.jini.thread.TaskManager(11, 15000, 1.0F, "CLI LeaseRenewalManager Task", 10);
}

net.jini.lookup.JoinManager {
	taskManager = new com.sun.jini.thread.TaskManager(15, 30000, 1.0F, "CLI JoinManager Task", 10);
}

/* -----------------------------------------------------------------------------
 * Default exporter to use for the ServiceDiscoveryManager is the same as the
 * exporter declared above
 * ---------------------------------------------------------------------------*/
net.jini.lookup.ServiceDiscoveryManager {
    eventListenerExporter = com.gigaspaces.transport.defaultExporter;
	cacheTaskManager = new com.sun.jini.thread.TaskManager(10, 15000, 1.0F, "CLI SDM Cache Task", 10);
	discardTaskManager = new com.sun.jini.thread.TaskManager(10, 15000, 1.0F, "CLI SDM Discard Task", 10);
}

org.jini.rio {
    defaultExporter = com.gigaspaces.transport.defaultExporter;
}
